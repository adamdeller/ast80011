#-------------------------------------------------------------------------------
# Name:         Scatter Plot Eccentricity by Perihelion
# Purpose:      Plots Eccentricity by Perihelion testparticles
#               Reads the start cartesian coordinates and turns them into orbital parameters using poliastro.
#               Based on PrettyScatterPlot.py but much more complicated because we don't have a, e and i, we only have x,y,z,vx,vy,vz.
#               Interesting use of lambda functions to get around poliastro.twobody.Orbit.from_vectors(...) 
#                 expecting numbers, not a pandas.dataframe series.
#               The read-in dataframe looks like this...
#                 [x], [y], [z], [vx], [vy], [vz]
#                 but after we use the get_orbit function, (and then the get_SMA and get_inc functions) it looks like this...
#                 [x], [y], [z], [vx], [vy], [vz], [TPorbit], [a], [inc], [ecc], [q]
#                 and that is something we can scatter plot!  :-)

# Requirements: Because matplotlib doesn't work (yet) with Python 3.10 this has to be run with
#               Python 3.9.  Sigh
#
# Parameters:   sys.argv[1]:   string filename of results from Swift Simulator
#               sys.argv[2]:   string filename of saved image
#               sys.argv[3]:   int xaxis limit (normally 0)
#               sys.argv[4]:   int yaxis limit (normally 0)
#               sys.argv[5]:   string that is placed as a subtitle.
#
# Notes:        
#               
# Author:       Tim Rattray
#
# Created:      21/11/2021
# Licence:      None. Use at your own risk.
#-------------------------------------------------------------------------------

import numpy as np
from astropy import units as u
from poliastro.bodies import Earth, Mars, Sun
from poliastro.twobody import Orbit

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import sys
import pandas as pd

fontTitle = {'family': 'sans',
             'color':  'black',
             'weight': 'bold',
             'size': 16,
            }
            
fontSubTitle = {'family': 'sans',
                'color':  'black',
                'size': 12,
               }

# Load in the csv data into a pandas dataframe
pd.set_option('display.max_rows', None) #when printing a dataframe, print ALL of the rows

pd.set_option('display.max_columns', None) #when printing a dataframe, print ALL of the columns
pd.set_option('display.width', 1000) #when printing out the data, if this isn't wide enough some data is lost.  You don't want to print out the dat anyway.
alldata = pd.read_csv(sys.argv[1], skipinitialspace=True, dtype={"x":float,"y":float,"z":float,"vz":float,"vy":float,"vz":float})
# for future reference, here are the column names
# x, y, z, vx, vy, vz


save_filename = sys.argv[2]
YLimit = int(sys.argv[3])  #Have to convert it to an integer, otherwise plt.ylim(0,YLimit) has a bad day
XLimit = int(sys.argv[4])  #ditto but for x
sup_title = sys.argv[5]    #this is the sub title, under the real title.


fig = plt.figure(figsize=(10,7))
ax = fig.add_subplot()

# Plot the test particles
def get_orbit(TPx, TPy, TPz, TPvx, TPvy, TPvz):
    return Orbit.from_vectors(Sun, [TPx, TPy, TPz]*u.AU, [TPvx, TPvy, TPvz]*u.AU/u.year)
def get_SMA(that_orbit):
    return that_orbit.a.to(u.AU).value
def get_inc(that_orbit):
    return that_orbit.inc.to(u.deg).value
def get_ecc(that_orbit):
    return that_orbit.ecc
    

alldata['TPorbit'] = alldata.apply(lambda row: get_orbit(row['x'], row['y'], row['x'], row['vx'], row['vy'], row['vz']), axis=1)
alldata['a']       = alldata.apply(lambda row: get_SMA(row['TPorbit']), axis=1)
alldata['inc']     = alldata.apply(lambda row: get_inc(row['TPorbit']), axis=1)
alldata['ecc']     = alldata.apply(lambda row: get_ecc(row['TPorbit']), axis=1)
alldata['q']       = alldata['a']*(1-alldata['ecc'])
#print(alldata['q'].head)
alldata = alldata[(alldata['a']>0)]     #lose some outliers
alldata = alldata[(alldata['a']<2500)]  #lose some outliers


ax.scatter(alldata['q']), alldata['ecc'], marker='.', s=1, color='black', label="ETNOs")


# draw vertical line from (x1,x2) to (y1, y2) 
#plt.plot([0, 800], [1, 0.4], 'b-', lw=1)


#NOTE BENE must set ylim AFTER the plotting data, or otherwise ylim max will default to 1.  [Traps for the unwary]
#plt.ylim(bottom=-5) #have the bottom of y axis a bit lower than 0 so we can see the terminated test particles.
#limit the top of the graph - we're not too interested in TPs that don't come close to the inner solar system
if YLimit != 0:  plt.ylim(-1, YLimit)
if XLimit != 0:  plt.xlim(0,  XLimit)
 

# Give it a title
ax.set_title('Eccentricity vs Perihelion', pad=30, fontdict=fontTitle)
#ax.set_suptitle('this is the subtitle', pad=20, fontdict=fontSubTitle)  no such thing as set_suptitle.  Why 'Sup?  "'sup man?'
plt.suptitle(x=0.5, y=0.88,t=sup_title, fontdict=fontSubTitle, ha="center")


# Label the axes
ax.set_xlabel('Perihelion in AU')
ax.set_ylabel('Eccentricity')

# Because we can't move the legend all the way outside the plot, we'll have to shrink the ax plot
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.95, box.height * 0.95])


fig.legend(loc="center right", frameon=False, scatterpoints=100)

# Save the figure
fig.savefig(save_filename)
plt.show()
